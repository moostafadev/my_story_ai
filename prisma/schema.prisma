datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

enum StoryState {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OrderState {
  STEP1
  STEP2
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

enum STORYTYPE {
  PDF
  SOFT
  HARD
}

enum ORDERTYPE {
  COD
  VISA
}

enum GENDER {
  MALE
  FEMALE
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  uuid        String    @unique @default(uuid())
  fName       String
  lName       String
  username    String    @unique
  email       String?
  password    String
  phoneNumber String?
  isFree      Boolean   @default(true)
  role        UserRole  @default(USER)

  isVerified    Boolean  @default(false)
  verificationCode String?
  verificationExpiry DateTime?

  // Relations
  addresses   Address[]
  orders      Order[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([email])
  @@index([phoneNumber])
}

model Story {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  uuid      String     @unique @default(uuid())

  // Titles & Descriptions
  titleEn   String
  titleAr   String
  descEn    String
  descAr    String
  miniDescEn String?
  miniDescAr String?

  state     StoryState @default(DRAFT)

  // Media (URLs directly from Cloudinary)
  imageArUrl String[]
  imageEnUrl String[]
  coverArUrl String?
  coverEnUrl String?
  pdfEnUrl   String?
  pdfArUrl   String?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Address {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  uuid        String    @unique @default(uuid())
  city        String
  street      String
  houseNumber String
  area        String?
  details     String?

  // Relations
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model Order {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  uuid          String     @unique @default(uuid())
  storiesPrice  Float      @default(0)
  deliveryPrice Float      @default(0)
  fPrice        Float      @default(0)
  cNote         String?
  ANote         String?
  state         OrderState @default(STEP1)

  // Relations
  userId        String     @db.ObjectId
  user          User       @relation(fields: [userId], references: [id],onDelete: Cascade)
  
  customerPhone String?

  // Snapshot Address
  city          String?
  street        String?
  area          String?
  houseNumber   String?
  details       String?

  // Child info
  name          String
  age           Int
  hobbies       String
  language      String
  description   String
  gender        GENDER
  hair_color    String?
  hair_style    String?
  eye_color     String?
  skin_tone     String?
  clothing_description     String?
  accessory_description    String?
  personality_traits       String?
  moral_value              String?
  child_image   String

  type          ORDERTYPE  @default(COD)
  storyType     STORYTYPE  @default(PDF)
  order_id      String?

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Settings {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  uuid        String   @unique @default(uuid())

  storyCreationPricePDF    Float    @default(0)
  storyCreationPriceSoft   Float    @default(0)
  storyCreationPriceHard   Float    @default(0)

  deliveryPrices        Json

  supportEmail          String?
  supportPhone          String?

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}